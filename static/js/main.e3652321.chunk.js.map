{"version":3,"sources":["components/LazyImage/LazyImage.js","components/FolkMe/FolkMe.js","components/LazyImageWrapper/LazyImageWrapper.js","views/Image/Image.js","App.js","serviceWorker.js","index.js"],"names":["LazyImage","props","state","loaded","handleScroll","bind","this","window","addEventListener","passive","removeEventListener","el","rect","getBoundingClientRect","top","left","innerHeight","document","documentElement","clientHeight","elementInViewport","imgElm","src","imgLoader","Image","onload","setAttribute","setState","width","height","className","alt","placeHolder","ref","React","Component","Folkme","svgDetail","position","size","backgroundColor","color","targetURL","ariaLabel","viewBox","style","fill","border","right","aria-hidden","d","transformOrigin","transform","href","aria-label","target","rel","LazyImageWrapper","author","url","useState","images","setImages","useEffect","a","fetch","res","json","forEach","img","id","genImages","map","key","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3652321.chunk.js","sourcesContent":["import React from 'react';\n\nfunction elementInViewport(el) {\n  const rect = el.getBoundingClientRect();\n\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.top <= (window.innerHeight || document.documentElement.clientHeight)\n  );\n}\n\nclass LazyImage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n    };\n\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleScroll();\n    window.addEventListener('scroll', this.handleScroll, { passive: true });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll, { passive: true });\n  }\n\n  handleScroll() {\n    if (!this.state.loaded && elementInViewport(this.imgElm)) {\n      const { src } = this.props;\n      const imgLoader = new Image();\n      imgLoader.src = src;\n      imgLoader.onload = () => {\n        if (this.imgElm) {\n          this.imgElm.setAttribute(`src`, `${src}`);\n          this.setState({\n            loaded: true,\n          });\n        }\n      };\n    }\n  }\n\n  render() {\n    const { width, height, className, alt, placeHolder } = this.props;\n    return (\n      <img\n        src={placeHolder}\n        width={width || '100%'}\n        height={height || '100%'}\n        ref={(imgElm) => (this.imgElm = imgElm)}\n        className={`${className}`}\n        alt={alt}\n      />\n    );\n  }\n}\n\nexport default LazyImage;\n","import React, { Component } from 'react';\nimport './FolkMe.scss';\n\nexport default class Folkme extends Component {\n  render() {\n    let svgDetail;\n    const position = this.props.position || 'right';\n    const size = this.props.size || '100px';\n    const backgroundColor = this.props.backgroundColor || '#000';\n    const color = this.props.color || '#fff';\n    const targetURL = this.props.targetURL || '/';\n    const ariaLabel = this.props.ariaLabel || 'View source on Github';\n\n    if (position === 'right') {\n      svgDetail = (\n        <svg\n          width={size}\n          height={size}\n          viewBox='0 0 250 250'\n          style={{\n            fill: backgroundColor,\n            color: color,\n            position: 'absolute',\n            top: 0,\n            border: 0,\n            right: 0,\n          }}\n          aria-hidden='true'\n        >\n          <path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path>\n          <path\n            d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'\n            fill='currentColor'\n            style={{ transformOrigin: '130px 106px' }}\n            className='octo-arm'\n          ></path>\n          <path\n            d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'\n            fill='currentColor'\n            className='octo-body'\n          ></path>\n        </svg>\n      );\n    } else if (position === 'left') {\n      svgDetail = (\n        <svg\n          width={size}\n          height={size}\n          viewBox='0 0 250 250'\n          style={{\n            fill: backgroundColor,\n            color: color,\n            position: 'absolute',\n            top: 0,\n            border: 0,\n            left: 0,\n            transform: 'scale(-1, 1)',\n          }}\n          aria-hidden='true'\n        >\n          <path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path>\n          <path\n            d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'\n            fill='currentColor'\n            style={{ transformOrigin: '130px 106px' }}\n            className='octo-arm'\n          ></path>\n          <path\n            d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'\n            fill='currentColor'\n            className='octo-body'\n          ></path>\n        </svg>\n      );\n    }\n\n    return (\n      <a\n        href={targetURL}\n        className='github-corner'\n        aria-label={ariaLabel}\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        {svgDetail}\n      </a>\n    );\n  }\n}\n\n// Ref: http://tholman.com/github-corners/\n","import React from 'react';\n\nimport LazyImage from '../LazyImage';\nimport './LazyImageWrapper.scss';\n\nconst LazyImageWrapper = (props) => {\n  const { placeHolder, src, alt, author, url } = props;\n  return (\n    <div className='cell'>\n      <LazyImage\n        src={src}\n        alt={alt}\n        placeHolder={placeHolder}\n        height='300'\n        width='300'\n        className='image'\n      />\n      <div className='caption'>\n        {author} from{' '}\n        <a href={url} target='_blank' rel='noopener noreferrer'>\n          Unsplash\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default LazyImageWrapper;\n","import React, { useState, useEffect } from 'react';\n\nimport { LazyImageWrapper, FolkMe } from '../../components';\n\nimport './Image.scss';\n\nconst Image = () => {\n  const [images, setImages] = useState([]);\n\n  useEffect(() => {\n    const genImages = async () => {\n      const res = await fetch('https://picsum.photos/v2/list?page=1&limit=100');\n      const images = await res.json();\n\n      images.forEach((img) => {\n        img.placeHolder = `https://picsum.photos/id/${img.id}/100/100/?blur=10`;\n        img.alt = `Author: ${img.author} - Unsplash: ${img.url}`;\n        img.src = `https://picsum.photos/id/${img.id}/600/600/`;\n      });\n      setImages(images);\n    };\n    genImages();\n  }, []);\n\n  return (\n    <div className='image-container'>\n      <h2 className='title'>\n        Scroll down to check out these beautiful images...\n      </h2>\n      <FolkMe\n        color='#fff'\n        backgroundColor='#000'\n        position='right'\n        size='100px'\n        ariaLabel='View source on Github'\n        targetURL='https://github.com/nvdai2401/awesome-lazy-loading'\n      />\n      <div className='container'>\n        {images.map((img) => (\n          <LazyImageWrapper\n            key={img.id}\n            placeHolder={img.placeHolder}\n            src={img.src}\n            alt={img.alt}\n            {...img}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Image;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n// import { NavBar } from './components';\nimport { Image } from './views';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className='app-container'>\n      {/* <NavBar /> */}\n      <Switch>\n        <Route exact path='/' component={Image} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}